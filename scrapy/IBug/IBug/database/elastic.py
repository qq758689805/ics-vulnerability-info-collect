#coding:utf8
import os
import time
from os import walk
from datetime import datetime
from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk

class ElasticObj:
    def __init__(self, index_name, index_type, ip="127.0.0.1"):
        '''
        :param index_name: 索引名称
        :param index_type: 索引类型
        '''
        self.index_name =index_name
        self.index_type = index_type
        # 无用户名密码状态
        #self.es = Elasticsearch([ip])
        #用户名密码状态
        self.es = Elasticsearch([ip], http_auth=('elastic', '123456'), port=9200)

        #res = self.es.get(index="icsvmd", doc_type="vlbinfo", id=01)
        #print(res)
    def create_index(self,index_name="ott",index_type="ott_type"):
        '''
        创建索引,创建索引名称为ott，类型为ott_type的索引
        :param ex: Elasticsearch对象
        :return:
        '''
        #创建映射
        _index_mappings = {
            "mappings": {
                self.index_type: {
                    "properties": {
                        "i_uuid": {
                            "type": "text",
                            "index": True,
                            "analyzer": "ik_max_word",
                            "search_analyzer": "ik_max_word"
                        },
                        "i_url": {
                            "type": "text",
                            "index": True
                        },
                        "i_title": {
                            "type": "text",
                        },
                        "i_author": {
                            "type": "text",
                        },
                        "i_authorurl": {
                            "type": "text",
                        },
                        "i_releasetime": {
                            "type": "text",
                        },
                        "i_type": {
                            "type": "text",
                        },
                        "i_labeldict": {
                            "type": "text",
                        },
                        "i_summary": {
                            "type": "text",
                        },
                        "i_content": {
                            "type": "text",
                        },
                        "i_sourcesite": {
                            "type": "text",
                        },
                        "i_imgurl": {
                            "type": "text",
                        },
                    }
                }
            }
        }

        if self.es.indices.exists(index=self.index_name) is True:
            res = self.es.indices.delete(index=self.index_name)
            print(res)
        res = self.es.indices.create(index=self.index_name, body=_index_mappings)
        print(res)


    def Index_Single_Item(self,item_dict):
        '''
        存储单个资讯库字典到es
        :param item_dict
        :return:
        '''
        res = self.es.index(index=self.index_name, doc_type=self.index_type, body=item_dict)
        print(res['result'])


    def Index_Data(self):
        '''
        数据存储到es
        :return:
        '''

        list = []

        info_dict = {"date": "2017-09-13",
                     "source": "慧聪网",
                     "link": "http://info.broadcast.hc360.com/2017/09/130859749974.shtml",
                     "keyword": "电视",
                     "title": "付费 电视 行业面临的转型和挑战"
                    }
        for i in range(100000):
            list.append(info_dict)

        for item in list:
            res = self.es.index(index=self.index_name, doc_type=self.index_type, body=item)
            print(res['result'])


    def bulk_Index_Data(self):
        '''
        用bulk将批量数据存储到es
        :return:
        '''


        info_dict = {"date": "2017-09-13",
                     "source": "慧聪网",
                     "link": "http://info.broadcast.hc360.com/2017/09/130859749974.shtml",
                     "keyword": "电视",
                     "title": "付费 电视 行业面临的转型和挑战"
                     }

        ACTIONS = []
        i = 1
        for i in range(1000000):
            action = {
                "_index": self.index_name,
                "_type": self.index_type,
                "_id": i, #_id 也可以默认生成，不赋值
                "_source": {
                    "date": info_dict['date'],
                    "source": info_dict['source'],
                    "link": info_dict['link'],
                    "keyword": info_dict['keyword'],
                    "title": info_dict['title']}
            }
            i += 1
            ACTIONS.append(action)
            # 批量处理

        print("开始执行存储数据命令")
        success, _ = bulk(self.es, ACTIONS, index=self.index_name, raise_on_error=True)
        print('Performed %d actions' % success)


    def Delete_Index_Data(self,id):
        '''
        删除索引中的一条
        :param id:
        :return:
        '''
        res = self.es.delete(index=self.index_name, doc_type=self.index_type, id=id)
        print(res)

    def Get_Data_Id(self,id):

        res = self.es.get(index=self.index_name, doc_type=self.index_type,id=id)
        print(res['_source'])

        print('------------------------------------------------------------------')
        #
        # # 输出查询到的结果
        for hit in res['hits']['hits']:
            # print hit['_source']
            print(hit['_source']['date'],hit['_source']['source'],hit['_source']['link'],hit['_source']['keyword'],hit['_source']['title'])

    def Get_Data_By_Body(self):
        # doc = {'query': {'match_all': {}}}
        doc = {
            "query": {
                "match": {
                    "keyword": "电视"
                }
            }
        }
        _searched = self.es.search(index=self.index_name, doc_type=self.index_type, body=doc)

        for hit in _searched['hits']['hits']:
            # print hit['_source']
            print(hit['_source']['date'], hit['_source']['source'], hit['_source']['link'], hit['_source']['keyword'], hit['_source']['title'])


if __name__ == '__main__':
    obj =ElasticObj("test1","test_type",ip ="172.16.42.15")
    obj.create_index()
    obj.bulk_Index_Data()
    print("aa")
    # obj = ElasticObj("ott1", "ott_type1")

    # obj.create_index()
    # obj.Index_Data()
    # obj.bulk_Index_Data()
    # obj.IndexData()
    # obj.Delete_Index_Data(1)
    # csvfile = 'D:/work/ElasticSearch/exportExcels/2017-08-31_info.csv'
    # obj.Index_Data_FromCSV(csvfile)
    # obj.GetData(es)