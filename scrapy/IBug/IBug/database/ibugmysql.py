# -*- coding: utf-8 -*-


import pymysql
import json
import time

spiderdict = {'aqniu':{'uuid':'i_uuid', 'basetb':'base_safety_info', 'advancedtb':'advanced_safety_info'},
              'vulnerability':{'uuid':'v_uuid', 'basetb':'base_public_vlun', 'advancedtb':'advanced_public_vlun'},
              'privatevulnerability':{'uuid':'p_uuid', 'basetb':'base_private_vlun', 'advancedtb':'advanced_private_vlun'},
              'nsfocusvlun': {'uuid':'n_uuid', 'basetb':'base_nsfocus_vlun', 'advancedtb':'advanced_nsfocus_vlun'}}


class IbugMySQL(object):
    def __init__(self, host, port, user, passwd, db):
        try:
            self.conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, db=db, charset="utf8")
            self.cursor = self.conn.cursor()
        except Exception as excep:
            print('IbugMySQL-__init__-Error：{}'.format(excep))


    def execute(self, sql, value=None):
        """执行SQL语句"""

        result = ()
        try:
            # 执行sql语句
            if not value:
                self.cursor.execute(sql)
            else:
                self.cursor.execute(sql, value)

            # 若是SELECT语句获取结果
            if sql.upper().startswith('SELECT'):
                result = self.cursor.fetchall()
            # 提交到数据库执行
            else:
                self.conn.commit()
            print("IbugMySQL-execute-success")
        except Exception as excep:
            print('IbugMySQL-execute-error：{}'.format(excep))
            self.conn.rollback()
        finally:
            return result

    def checkduplicate(self, spider, item):
        """检验uuid是否重复"""

        duplicateflag = False
        sql = "SELECT * FROM {table} WHERE {uuid}='{itemuuid}'".format( \
               table=spiderdict[spider]['basetb'], \
               uuid=spiderdict[spider]['uuid'], \
               itemuuid=item[spiderdict[spider]['uuid']])
        result = self.execute(sql)
        if result:
            duplicateflag = True
            print("漏洞重复：%s" % (spiderdict[spider]['uuid']))

        return duplicateflag


    def insert(self, spider, item):
        """插入数据"""

        if spider == 'vulnerability':
            # 使用CVE编号或BUGTRAQ编号匹配绿盟n_uuid及n_nsfocusid
            if item.get('v_cves') or item.get('v_bugtraqs'):
                v_nsfocusid = {}
                if item.get('v_cves'):
                    v_cves = json.loads(item['v_cves'])
                    for cve in v_cves:
                        sql = "SELECT n_uuid, n_nsfocusid FROM base_nsfocus_vlun WHERE n_cves LIKE '%{}%'".format(cve)
                        results = self.execute(sql)
                        for row in results:
                            v_nsfocusid.setdefault(row[0], row[1])


                if not v_nsfocusid and item.get('v_bugtraqs'):
                    v_bugtraqs = json.loads(item['v_bugtraqs'])
                    for bugtraq in v_bugtraqs:
                        sql = "SELECT n_uuid, n_nsfocusid FROM base_nsfocus_vlun WHERE n_bugtraqs LIKE '%{}%'".format(bugtraq)
                        results = self.execute(sql)
                        for row in results:
                            v_nsfocusid.setdefault(row[0], row[1])

                if v_nsfocusid:
                    item['v_nsfocusid'] = json.dumps(v_nsfocusid, ensure_ascii=False)


        if not self.checkduplicate(spider, item):

            # 提交基础库
            valuetuple = tuple(item.values())
            feild = ','.join(item.keys())
            feildtype = ','.join(list(map(lambda x:'%s', item.values())))

            sql = 'INSERT INTO %s (%s) VALUES (%s)' % (spiderdict[spider]['basetb'], feild,  feildtype)
            self.execute(sql, valuetuple)

            # 提交高级库
            advanceditem = {}

            if spider == 'vulnerability':
                advanceditem.setdefault('v_uuid', item['v_uuid'])
                advanceditem.setdefault('v_name', item['v_name'])
                advanceditem.setdefault('v_cnvds', item['v_cnvds'])
                advanceditem.setdefault('v_reviewflag', '已通过审核')
                advanceditem.setdefault('v_verifyflag', '未验证')
                advanceditem.setdefault('v_submitflag', '系统提交')
                advanceditem.setdefault('v_submittime', time.strftime('%Y-%m-%d %H:%M:%S',time.localtime()))
                advanceditem.setdefault('v_popularity', 0)

            elif spider == 'privatevulnerability':
                advanceditem.setdefault('p_uuid', item['p_uuid'])
                advanceditem.setdefault('p_name', item['p_name'])
                advanceditem.setdefault('p_ive', item['p_ive'])
                advanceditem.setdefault('p_reviewflag', '已通过审核')
                advanceditem.setdefault('p_verifyflag', '未验证')
                advanceditem.setdefault('p_submitflag', '系统提交')
                advanceditem.setdefault('p_submittime', time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()))
                advanceditem.setdefault('p_popularity', 0)

            elif spider == 'nsfocusvlun':
                advanceditem.setdefault('n_uuid', item['n_uuid'])
                advanceditem.setdefault('n_name', item['n_name'])
                advanceditem.setdefault('n_nsfocusid', item['n_nsfocusid'])
                advanceditem.setdefault('n_submitflag', '系统提交')
                advanceditem.setdefault('n_submittime', time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()))
                advanceditem.setdefault('n_popularity', 0)

            elif spider == 'aqniu':
                advanceditem.setdefault('i_uuid', item['i_uuid'])
                advanceditem.setdefault('i_title', item['i_title'])
                advanceditem.setdefault('n_popularity', 0)
            else:
                pass

            if advanceditem:
                valuetuple = tuple(advanceditem.values())
                feild = ','.join(advanceditem.keys())
                feildtype = ','.join(list(map(lambda x: '%s', advanceditem.values())))
                sql = 'INSERT INTO %s (%s) VALUES (%s)' % (spiderdict[spider]['advancedtb'], feild, feildtype)
                self.execute(sql, valuetuple)



    def close(self):
        self.cursor.close()
        self.conn.close()




