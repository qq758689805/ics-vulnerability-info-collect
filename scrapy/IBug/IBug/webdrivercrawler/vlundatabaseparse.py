# -*- coding: utf-8 -*-

import re
import requests
from IBug.webdrivercrawler.webParse import getParse

from scrapy.selector import Selector, HtmlXPathSelector

class getVlunDatabaseParse(object):

    @staticmethod
    def get_cnvd_patch(patchurl=None):
        """获取cnvd工控漏洞补丁信息"""

        patchdict = {}
        try:
            selector = getParse.getSelectorByWebDriver(patchurl)
            patchdict['p_url'] = patchurl

            p_name = selector.xpath('//div[@class="blkContainerSblk"]/h1/text()').extract_first()
            if p_name:
                patchdict['p_name'] = p_name
            p_idstr = selector.xpath('//div[@class="artInfo"]/span[2]/text()').extract_first()
            if p_idstr:
                if ':' in p_idstr:
                    patchdict['p_id'] = p_idstr.split(':')[1]

            trnodes = selector.xpath('//table[@class="gg_detail"]/tbody/tr')
            for tr in trnodes[:-1]:
                td = tr.xpath('./td')
                td0Text = td[0].xpath('./text()').extract_first()

                if td0Text == '补丁链接':
                    p_linkurl = td[1].xpath('./a/@href').extract_first()
                    if p_linkurl:
                        patchdict['p_linkurl'] = p_linkurl
                elif td0Text == '补丁描述':
                    p_description = td[1].xpath('./text()').extract_first()
                    if p_description:
                        patchdict['p_description'] = p_description
                else:
                    continue

        except Exception as excep:
            print('get_cnvd_patch-{}出现错误：{}'.format(patchurl, excep))
        finally:
            return patchdict


    @staticmethod
    def get_secutiryfocus_cve(bugtraqid=None):
        """通过Bugtraq漏洞编号查找CVE编号"""

        # 50830 多CVE编号
        cves = []
        bugtraqurl = 'https://www.securityfocus.com/bid/'
        try:
            selector = getParse.getSelectorByRequests(bugtraqurl + bugtraqid)

            cvelist = selector.xpath('//tr[3]/td[2]/text()').extract()
            for cve in cvelist[:-1]:
                cves.append(cve.strip())

        except Exception as excep:
            print('get_secutiryfocus_cve-{}出现错误：{}'.format(bugtraqurl, excep))
        finally:
            return cves


    @staticmethod
    def get_cve_cvss(cveid=None):
        """通过NVD漏洞详情获取CVSS分数及CVSS向量"""
        cveurl = 'https://nvd.nist.gov/vuln/detail/'
        selector = getParse.getSelectorByWebDriver(cveurl + cveid)

        cvssscore = None
        cvsssvector = None

        # 获得CVSS分值
        cvsssstr = selector.xpath('//span[@data-testid="vuln-cvssv2-base-score"]/text()').extract_first()
        if cvsssstr:
            cvsssre = re.search('[0-9.]+', cvsssstr)
            if cvsssre:
                cvssscore = float(cvsssre.group())

        # 获得CVSS向量
        cvsssvectorstr = selector.xpath('//span[@data-testid="vuln-cvssv2-vector"]/text()').extract_first()
        if cvsssvectorstr:
            if '(' in cvsssvectorstr and ')' in cvsssvectorstr:
                cvsssvector = cvsssvectorstr.split('(')[1].split(')')[0]
        if cvssscore and cvsssvector:
            return cvssscore, cvsssvector

    @staticmethod
    def get_cnnvd_id_type(cveid=None):
        """通过CNNVD网站查询CNNVD编号及CNNVD漏洞类型"""
        cnnvdUrl = 'http://www.cnnvd.org.cn'
        data = {'qcvCnnvdid': cveid}
        source1 = requests.post(cnnvdUrl + '/web/vulnerability/queryLds.tag', data=data).text
        selector1 = Selector(text=source1)

        # 只取第一个匹配到的CNNVD漏洞id及类型
        vulnUrl = selector1.xpath('//div[@id="vulner_0"]/a[@target="_blank"]/@href').extract_first()
        if vulnUrl is not None:
            cnnvdVulnUrl = cnnvdUrl + vulnUrl
            cnnvdid = selector1.xpath('//div[@id="vulner_0"]/p/a/text()').extract_first().strip()
            source2 = requests.get(cnnvdVulnUrl).text
            selector2 = Selector(text=source2)
            cnnvdtype = selector2.xpath('//li/a[contains(@onclick, "cvVultype")]/text()').extract_first().strip()

            cnnvdthreattype = selector2.xpath('//li/a[contains(@onclick, "cvUsedStyle")]/text()').extract_first().strip()

            return cnnvdid, cnnvdtype, cnnvdthreattype




    @staticmethod
    def get_cert_id(cveid=None):
        """通过CVE漏洞编号查找ICS-CERT编号"""
        certs = []
        icscertsearchurl = 'https://search.usa.gov/search?utf8=%E2%9C%93&affiliate=us-cert-ics&query={}&commit=Search'.format(cveid)

        try:
            selector = getParse.getSelectorByWebDriver(icscertsearchurl)
            h3node = selector.xpath('//h3[@class="suggested-query"]').extract_first()
            # 判断是否有Showing results for
            if h3node is None:
                resultnodes = selector.xpath('//div[@id="results"]/div[contains(@id, "result")]')
                # nextpage = selector.xpath('//a[@class="next_page"]/@href').extract_first()
                # if nextpage:
                #     nextpage = 'https://search.usa.gov' + nextpage

                # 只搜索第一页
                for result in resultnodes:
                    urlstr = result.xpath('./span[@class="url"]/text()').extract_first()
                    if '/ICSA-' in urlstr or '/ICSMA-' in urlstr:
                        source = getParse.getSourceByWebDriver(urlstr)
                        # 判断Cert页面中是否存在此cve id
                        if cveid in source:
                            cert = urlstr.split('/')[-1]
                            certs.append(cert)

        except Exception as excep:
            print('get_cert_id-{}出现错误：{}'.format(icscertsearchurl, excep))
        finally:
            return certs