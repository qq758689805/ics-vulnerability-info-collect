# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html

import json

from scrapy.exceptions import DropItem
from IBug.database.ibugmysql import IbugMySQL

class IbugPipeline(object):
    def __init__(self, mysql_host, mysql_port, mysql_user, mysql_password, mysql_db):

        self.ibugmysql = IbugMySQL(host=mysql_host, port=mysql_port, user=mysql_user, passwd=mysql_password, db=mysql_db)

    @classmethod
    def from_crawler(cls, crawler):
        """初始化时候，用于创建pipeline对象"""

        mysql_host = crawler.settings.get('MYSQL_HOST')
        mysql_port = crawler.settings.get('MYSQL_PORT')
        mysql_user = crawler.settings.get('MYSQL_USER')
        mysql_password = crawler.settings.get('MYSQL_PASSWORD')
        mysql_db = crawler.settings.get('MYSQL_DB')

        return cls(mysql_host, mysql_port, mysql_user, mysql_password, mysql_db)
        #pass
    def open_spider(self, spider):
        """爬虫开始执行时，调用"""
        pass

    def close_spider(self, spider):
        """爬虫关闭时，被调用"""

        self.ibugmysql.close()

    def process_item(self, item, spider):
        """每当数据需要持久化时，就会被调用"""

        self.ibugmysql.insert(spider.name, item)

        # print(item)

        # if spider.name == 'nsfocusvlun':
        #     duplicationflag = True
        #     try:
        #         # mysql数据库链接uuid去重
        #         self.cursor.execute('SELECT n_uuid FROM base_nsfocus_vlun')
        #         results = self.cursor.fetchall()
        #         for row in results:
        #             n_uuid = row[0]
        #             if item['n_uuid'] == n_uuid:
        #                 print("链接重复：%s" % (item['n_url']))  # 测试语句
        #                 duplicationflag = False
        #                 break
        #
        #         if duplicationflag:
        #             valuetuple = tuple(item.values())
        #             feild = ','.join(item.keys())
        #             feildtype = ','.join(list(map(lambda x:'%s',item.values())))
        #
        #             sql = 'INSERT INTO base_nsfocus_vlun (%s) VALUES (%s)' % (feild, feildtype)
        #             self.cursor.execute(sql, valuetuple)
        #
        #             self.con.commit()
        #             print("insert success")           # 测试语句
        #     except Exception as e:
        #         print('Insert error:', e)
        #         self.con.rollback()



        # if spider.name =='privatevulnerability':
        #     duplicationflag = True
        #     try:
        #         # mysql数据库链接uuid去重
        #         self.cursor.execute('SELECT p_uuid FROM base_private_vlun')
        #         results = self.cursor.fetchall()
        #         for row in results:
        #             p_uuid = row[0]
        #             if item['p_uuid'] == p_uuid:
        #                 print("漏洞重复：%s" % (item['p_ive']))  # 测试语句
        #                 duplicationflag = False
        #                 break
        #
        #         if duplicationflag:
        #             valuetuple = tuple(item.values())
        #             feild = ','.join(item.keys())
        #             feildtype = ','.join(list(map(lambda x:'%s',item.values())))
        #
        #             sql = 'INSERT INTO base_private_vlun (%s) VALUES (%s)' % (feild, feildtype)
        #
        #             self.cursor.execute(sql, valuetuple)
        #             self.con.commit()
        #             print("insert success")           # 测试语句
        #     except Exception as e:
        #         print('Insert error:', e)
        #         self.con.rollback()
        #
        #
        # if spider.name =='aqniu':
        #     duplicationflag = True
        #     try:
        #         # mysql数据库链接uuid去重
        #         self.cursor.execute('SELECT i_uuid FROM base_safety_info')
        #         results = self.cursor.fetchall()
        #         for row in results:
        #             i_uuid = row[0]
        #             if item['i_uuid'] == i_uuid:
        #                 print("链接重复：%s" % (item['i_url']))  # 测试语句
        #                 duplicationflag = False
        #                 break
        #
        #         if duplicationflag:
        #             valuetuple = tuple(item.values())
        #             feild = ','.join(item.keys())
        #             feildtype = ','.join(list(map(lambda x:'%s',item.values())))
        #
        #             sql = 'INSERT INTO base_safety_info (%s) VALUES (%s)' % (feild, feildtype)
        #
        #             self.cursor.execute(sql, valuetuple)
        #             self.con.commit()
        #             print("insert success")           # 测试语句
        #     except Exception as e:
        #         print('Insert error:', e)
        #         self.con.rollback()
        #
        #
        # if spider.name == 'vulnerability':
        #
        #     duplicationflag = True
        #     try:
        #         # mysql数据库链接uuid去重
        #         self.cursor.execute('SELECT v_uuid FROM base_public_vlun')
        #         results = self.cursor.fetchall()
        #         for row in results:
        #             v_uuid = row[0]
        #             if item['v_uuid'] == v_uuid:
        #                 print("链接重复：%s" % (item['v_url']))  # 测试语句
        #                 duplicationflag = False
        #                 break
        #
        #         # 使用CVE编号或BUGTRAQ编号匹配绿盟n_uuid及n_nsfocusid
        #         if item.get('v_cves') or item.get('v_bugtraqs'):
        #             v_nsfocusid = {}
        #
        #             if item.get('v_cves'):
        #                 v_cves = json.loads(item['v_cves'])
        #                 for cve in v_cves:
        #                     sql = "select n_uuid, n_nsfocusid from base_nsfocus_vlun where n_cves LIKE '%{}%'".format(cve)
        #                     self.cursor.execute(sql)
        #                     results = self.cursor.fetchall()
        #                     for row in results:
        #                         v_nsfocusid[row[0]] = row[1]
        #
        #             if not v_nsfocusid and item.get('v_bugtraqs'):
        #                 v_bugtraqs = json.loads(item['v_bugtraqs'])
        #                 for bugtraq in v_bugtraqs:
        #                     sql = "select n_uuid, n_nsfocusid from base_nsfocus_vlun where n_bugtraqs LIKE '%{}%'".format(bugtraq)
        #                     self.cursor.execute(sql)
        #                     results = self.cursor.fetchall()
        #                     for row in results:
        #                         v_nsfocusid[row[0]] = row[1]
        #
        #             if v_nsfocusid:
        #                 item['v_nsfocusid'] = json.dumps(v_nsfocusid, ensure_ascii=False)
        #
        #         if duplicationflag:
        #             valuetuple = tuple(item.values())
        #             feild = ','.join(item.keys())
        #             feildtype = ','.join(list(map(lambda x: '%s', item.values())))
        #
        #             sql = 'INSERT INTO base_public_vlun (%s) VALUES (%s)' % (feild, feildtype)
        #
        #             self.cursor.execute(sql, valuetuple)
        #             self.con.commit()
        #             print("insert success")  # 测试语句
        #     except Exception as e:
        #         print('Insert error:', e)
        #         self.con.rollback()


        # 交给下一个pipeline处理
        return item
        # 丢弃item，不交给
        # raise DropItem()